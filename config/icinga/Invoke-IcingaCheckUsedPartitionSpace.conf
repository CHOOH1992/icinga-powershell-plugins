object CheckCommand "Invoke-IcingaCheckUsedPartitionSpace" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output "Error: $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable "icinga-powershell-*" )`r`nModule-Path:`r`n$$($$Env:PSModulePath)"; exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckUsedPartitionSpace' "
            order = 0
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckUsedPartitionSpace_Int32_Verbosity$"
            order = 6
        }
        "-ThresholdInterval" = {
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = "$IcingaCheckUsedPartitionSpace_String_ThresholdInterval$"
            order = 100
        }
        "-IgnoreEmptyChecks" = {
            set_if = "$IcingaCheckUsedPartitionSpace_Switchparameter_IgnoreEmptyChecks$"
            order = 99
        }
        "-Include" = {
            description = "Used to specify an array of partitions to be included. If not set, the check expects that all not excluded partitions should be checked. e.g. 'C:\\','D:\\'"
            value = {{
                var arr = macro("$IcingaCheckUsedPartitionSpace_Array_Include$");
                    if (len(arr) == 0) {
                        return "@()";
                    }
                    return arr.map(
                        x => if (typeof(x) == String) {
                            var argLen = len(x);
                            if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                                x;
                            } else {
                                "'" + x + "'";
                            }
                        } else {
                            x;
                        }
                    ).join(",");
            }}
            order = 4
        }
        "-Warning" = {
            description = "Used to specify a Warning threshold. This can either be a byte-value type like '10GB' or a %-value, like '10%'"
            value = "$IcingaCheckUsedPartitionSpace_Object_Warning$"
            order = 2
        }
        "-Critical" = {
            description = "Used to specify a Critical threshold. This can either be a byte-value type like '10GB' or a %-value, like '10%'"
            value = "$IcingaCheckUsedPartitionSpace_Object_Critical$"
            order = 3
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckUsedPartitionSpace_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Exclude" = {
            description = "Used to specify an array of partitions to be excluded. e.g. 'C:\\','D:\\'"
            value = {{
                var arr = macro("$IcingaCheckUsedPartitionSpace_Array_Exclude$");
                    if (len(arr) == 0) {
                        return "@()";
                    }
                    return arr.map(
                        x => if (typeof(x) == String) {
                            var argLen = len(x);
                            if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                                x;
                            } else {
                                "'" + x + "'";
                            }
                        } else {
                            x;
                        }
                    ).join(",");
            }}
            order = 5
        }
        "-SkipUnknown" = {
            set_if = "$IcingaCheckUsedPartitionSpace_Switchparameter_SkipUnknown$"
            order = 99
        }
    }
    vars.IcingaCheckUsedPartitionSpace_Switchparameter_SkipUnknown = false
    vars.IcingaCheckUsedPartitionSpace_Switchparameter_IgnoreEmptyChecks = false
    vars.IcingaCheckUsedPartitionSpace_Switchparameter_NoPerfData = false
}
